{
	"language": "go",
	"head": [
		"package test",
		"",
		"import \"github.com/ddiay/go-gameserver/acctserver\"",
		""
	],
	"tail": [	],
	"typemap": {
		"int": {
			"variable": [ "var <VAR> int" ],
			"field": [ "<FIELD> int" ],
			"param": [ "<FIELD>" ],
			"serialize": [ "binary.LittleEndian.PutUint32(data, uint32(<VAR>))" ],
			"deserialize": [ "<VAR> := binary.LittleEndian.Uint32(data)" ]
		},
		"string": {
			"variable": [ "var <VAR> string" ],
			"field": [ "<FIELD> string" ],
			"param": [ "<FIELD>" ],
			"serialize": [ "binary.LittleEndian.PushString(data, <VAR>)" ],
			"deserialize": [ "<VAR> := binary.LittleEndian.String(data)" ]
		},
		"map": {
			"variable": [ "var <VAR> <TYPE>[<KEYTYPE>]<VALUETYPE>" ],
			"field": [ "<FIELD> <TYPE>[<KEYTYPE>]<VALUETYPE>" ],
			"param": [ "<FIELD>" ],
			"serialize": [ "" ],
			"deserialize": [ "" ]
		},
		"list": {
			"variable": [ "var <VAR> []<VALUETYPE>" ],
			"field": [ "<FIELD> []<VALUETYPE>" ],
			"param": [ "<FIELD>" ],
			"serialize": [ "" ],
			"deserialize": [ "" ]
		},
		"struct": {
			"declaration": [
				"type <TYPE> struct {",
					"<FIELDS>",
				"}",
				"",
				"func Marshal<TYPE>(self <TYPE>, data []byte) {",
				"}",
				"",
				"func Unmarshal<TYPE>(self <TYPE>, data []byte) {",
				"}",
				""
			],
			"field": [ "<FIELD> <TYPE>" ],
			"param": [ "<FIELD>" ],
			"serialize": [ "Marshal<TYPE>(<VAR>, data []byte)" ],
			"deserialize": [ "Unmarshal<Type>(<VAR>, data []byte)" ]
		}
	},
	"msgmap": {
		"from": {
			"head": [ "" ],
			"tail": [ "" ],
			"body": [
				"func <METHOD>(to <TOTYPE>, <PARAMS>) {",
					"\tdata := make([]byte, 65535)",
					"<SERIALIZE>",
					"\tto.Send(data)",
				"}",
				"",
				"func Broadcast<METHOD>(toList []<TOTYPE>, <PARAMS>) {",
					"\tdata := make([]byte, 65535)",
					"<SERIALIZE>",
					"\tfor _, to := range toList {",
						"\t\tto.Send(data)",
					"\t}",
				"}"
			]
		},
		"to": {
			"head": [ 
				"",
				"type ParseCallback func(from <FROMTYPE>, data []byte)",
				"var methods map[int]ParseCallback",
				"func Parse(from <FROMTYPE>, data []byte) {",
					"\tmsgid := binary.LittleEndian.Uint16(data)",
					"\tm, ok := methods[int(msgid)]",
					"\tif !ok {",
						"\t\treturn",
					"\t}",
					"\tm(from, data[2:])",
				"}",
				""
			 ],
			"tail": [ "" ],
			"body": [
				"func Parse<METHOD>(from <FROMTYPE>, data []byte) {",
					"\t<DESERIALIZE>",
					"\tOn<METHOD>(from<VARS>)",
				"}",
				""
			]
		}
	}
}